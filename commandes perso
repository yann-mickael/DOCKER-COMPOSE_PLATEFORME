Explication des messages
â€¢	âœ” php Built : Cela signifie que l'image Docker pour le service PHP a Ã©tÃ© construite avec succÃ¨s.
â€¢	âœ” Container mariadb Running : Le conteneur MariaDB est en cours d'exÃ©cution.
â€¢	âœ” Container nginx Started : Le conteneur Nginx a dÃ©marrÃ© avec succÃ¨s.
â€¢	âœ” Container php-fpm Started : Le conteneur PHP-FPM a dÃ©marrÃ© avec succÃ¨s.
DOCKER-COMPOSE_PLATEFORME



VÃ©rifier la version de Docker
Docker -v
Docker version compose


RedÃ©marrer les services Docker : Retourne dans ton terminal et exÃ©cute la commande suivante pour appliquer les changements :
docker compose up -d â€“build
Signification :
â€¢	docker compose : utilise Docker Compose (nouvelle syntaxe intÃ©grÃ©e Ã  Docker CLI).
â€¢	up : lance les services dÃ©finis dans le fichier docker-compose.yml.
â€¢	-d : exÃ©cute les conteneurs en mode dÃ©tachÃ© (en arriÃ¨re-plan).
â€¢	--build : force la reconstruction des images, mÃªme si elles existent dÃ©jÃ .

Nettoyer les conteneurs orphelins
â€¢docker compose down --remove-orphans


Lister tous les conteneurs du projet :
â€¢ docker compose ps --all


https://www.simplehomelab.com/wordpress-on-docker-traefik/?utm_source=chatgpt.com



ðŸ”„  RedÃ©marrer les services Docker
AprÃ¨s avoir vÃ©rifiÃ© ou modifiÃ© le fichier docker-compose.yml, redÃ©marrez les services Docker pour appliquer les changements :
â€¢ docker compose down
â€¢ docker compose up -d


Permissions : VÃ©rifiez que les permissions du rÃ©pertoire montÃ© sont correctes. 
Les conteneurs doivent avoir les droits nÃ©cessaires pour lire et Ã©crire dans ce rÃ©pertoire.
# sudo chown -R 33:33 /chemin/vers/votre/dossier/wordpress
https://forums.docker.com/t/nginx-proxy-manager-cant-connect-to-docker-containers-502-bad-gateway/146451

ðŸ”„ VÃ©rifier le contenu du volume
exemple pour vÃ©rifier que le volume contient bien les fichiers de WordPress :
# docker run --rm -v wordpress_data:/data alpine ls /data

ðŸ”„ Localisation des volumes Docker sur Windows
Pour accÃ©der Ã  vos volumes Docker, y compris wordpress_data, suivez ces Ã©tapes :
1.	Ouvrir l'Explorateur de fichiers : Appuyez sur Win + E pour ouvrir l'Explorateur de fichiers.
2.	AccÃ©der au chemin rÃ©seau : Dans la barre d'adresse de l'Explorateur, entrez le chemin suivant :

\\wsl.localhost\docker-desktop\mnt\docker-desktop-disk\data\docker\volumes
 

ðŸ”„ Voir les conteneurs :
AccÃ©der au conteneur WordPress :
# docker exec -it wordpress bash

ðŸ”„ Modifier les permissions :
# chown -R www-data:www-data /var/www/html
 

ðŸ”„ Enregistrer lâ€™historique des commandes CMD dans un fichier texte
cmd
# doskey /history > commandes.txt

ðŸ”„ Supprimer les volumes de donnÃ©es pour tout nettoyer complÃ¨tement :
# docker-compose down --volumes

https://medium.com/cypik/deploying-a-php-web-app-with-docker-compose-nginx-and-mariadb-a-complete-guide-d8940f23f1de

project-root/
â”‚
â”œâ”€â”€ docker-compose.yml
â”œâ”€â”€ nginx/
â”‚   â””â”€â”€ nginx.conf
â”œâ”€â”€ wordpress/
â”‚   â””â”€â”€ (fichiers WordPress seront crÃ©Ã©s automatiquement)
â””â”€â”€ mariadb/
    â””â”€â”€ (donnÃ©es de la DB seront stockÃ©es ici)


MYSQL_ROOT_PASSWORD=Laplateforme  # Mot de passe pour l'utilisateur root MySQL
MYSQL_USER=Laplateforme           # Nom d'utilisateur pour la base de donnÃ©es
MYSQL_PASSWORD=Laplateforme       # Mot de passe de l'utilisateur MySQL
MYSQL_DATABASE=wordpress          # Nom de la base de donnÃ©es Ã  crÃ©er


s les services suivants :
â€¢	nginx : pour servir WordPress et phpMyAdmin.
â€¢	php-fpm : pour exÃ©cuter le code PHP (utilisÃ© par WordPress et phpMyAdmin).
â€¢	MariaDB : la base de donnÃ©es pour WordPress et phpMyAdmin.
â€¢	phpMyAdmin : interface web pour gÃ©rer MariaDB.



